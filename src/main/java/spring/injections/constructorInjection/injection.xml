<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Constructor Argument Resolution -->
	<!-- Constructor argument resolution matching occurs by using the argumentâ€™s 
		type. If no potential ambiguity exists in the constructor arguments of a 
		bean definition, the order in which the constructor arguments are defined 
		in a bean definition is the order in which those arguments are supplied to 
		the appropriate constructor when the bean is being instantiated -->

	<!-- When another bean is referenced, the type is known, and matching can 
		occur -->

	<bean id="first"
		class="spring.injections.constructorInjection.FirstBean"></bean>
	<bean id="second"
		class="spring.injections.constructorInjection.SecondBean"></bean>

	<bean id="main"
		class="spring.injections.constructorInjection.BeanNeeded">

		<constructor-arg ref="first" />
		<constructor-arg ref="second" />
	</bean>

	<!-- Assuming that the FirstBean and SecondBean classes are not related 
		by inheritance, no potential ambiguity exists. Thus, the following configuration 
		works fine, and you do not need to specify the constructor argument indexes 
		or types explicitly in the <constructor-arg/> element -->

	<!-- When a simple type is used, such as <value>true</value>, Spring cannot 
		determine the type of the value, and so cannot match by type without help. 
		Consider the following class -->
	<!-- ********************************************************************************** -->


	<!-- Using the type attribute -->
	<!-- <bean id="simple" class="spring.injections.constructorInjection.SimpleTypeExample"> 
		<constructor-arg type="int" value="35" /> <constructor-arg type="String" 
		value="lonely" /> </bean> -->

	<!-- You can use the index attribute to specify explicitly the index of 
		constructor arguments, as the following example shows -->

	<bean id="index"
		class="spring.injections.constructorInjection.SimpleTypeExample">
		<constructor-arg index="0" value="350" />
		<constructor-arg index="1" value="always lonely" />
	</bean>


	<!-- ************************************************************************ -->

	<!-- Constructor argument name You can also use the constructor parameter 
		name for value disambiguation, as the following example shows: -->
	<bean id="exampleBean"
		class="spring.injections.constructorInjection.NameAttributeDemo">
		<constructor-arg name="years" value="7500000" />
		<constructor-arg name="ultimateAnswer" value="42" />
	</bean>
	<!-- Keep in mind that, to make this work out of the box, your code must 
		be compiled with the debug flag enabled so that Spring can look up the parameter 
		name from the constructor. If you cannot or 25 do not want to compile your 
		code with the debug flag, you can use the @ConstructorProperties JDK annotation 
		to explicitly name your constructor arguments. The sample class would then 
		have to -->


</beans>